generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int     @db.Integer
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  sessoin_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
id             Int           @id @default(autoincrement())
name           String?
email          String?       @unique
emailVerified  DateTime?
image          String?       @db.VarChar(255)
hachedPassword String?
createdAt      DateTime      @default(now())
updatedAt      DateTime      @updatedAt

conversations   ConversationToUser[]

seenMessages   MessageToUser[]

accounts Account[]
messages Message[]
}

model Conversation {
id            Int      @id @default(autoincrement())
createdAt     DateTime @default(now())
lastMessageAt DateTime @default(now())
name          String?
isGroup       Boolean?

messages    Message[]

users   ConversationToUser[]
}

model ConversationToUser {
userId        Int
user          User        @relation(fields: [userId], references: [id])
conversationId Int
conversation Conversation @relation(fields: [conversationId], references: [id])

@@id([userId, conversationId])
}

model Message {
id        Int       @id @default(autoincrement())
body      String?
image     String?   @db.VarChar(255)
createdAt DateTime   @default(now())

seen    MessageToUser[]

conversationId Int          @db.Integer
conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

senderId Int   @db.Integer
sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model MessageToUser {
userId        Int
user          User        @relation(fields: [userId], references: [id])
messageId     Int
message       Message     @relation(fields: [messageId], references: [id])

@@id([userId, messageId])
}

